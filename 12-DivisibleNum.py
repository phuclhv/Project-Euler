'''
he sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

     1: 1
     3: 1,3
     6: 1,2,3,6
    10: 1,2,5,10
    15: 1,3,5,15
    21: 1,3,7,21
    28: 1,2,4,7,14,28

We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
'''
import math
def numMoreDivisor(maxNumDivisor):
    # The number of divisor of this currNum will be (4+1) * (4+1) * (4+1) * (1+1) * (1+1) = 500
  currNum  = 2**4 * 3**4 * 5**4 * 7 * 11

  # Use quadratic function formula for this function x^2 + x - num = 0
  def nextTriangle(num):
    x = int(math.sqrt(2*num))
    if 0.5*x*(x+1) == num:
      return 0
    return x

  def numDivisors(num):
    limit = int(math.sqrt(num))
    divisors_list = []
    for i in range(1, limit+1, 1):
        if num % i == 0:
            divisors_list.append(i)
            if i != num/i:
                divisors_list.append(num/i)
    return len(divisors_list)

  while (nextTriangle(currNum) == 0):
    currNum +=1

  currTriNum = nextTriangle(currNum)
  print(currNum, currTriNum)
  while numDivisors(currNum) <= maxNumDivisor:
    currNum += currTriNum
    currTriNum +=1
  print(currNum, numDivisors(currNum))
  return currNum
        
print(numMoreDivisor(500))