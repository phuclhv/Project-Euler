'''
Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
'''


import time
TEST_CYCLES = 10
'''
1st approach:
- Use 2 value to store the most 2 recent fibo number, use those to generate the next number. Swap the new number with smaller value. 
- If new number is even, add it to sum
Space complexity: 0(1)
'''

def sumFibo(limit):
  prevVal, currVal = 1, 2
  res = 2
  while currVal <= limit:
    currVal = prevVal + currVal
    prevVal = currVal - prevVal
    if currVal % 2 == 0:
      res += currVal
      #print(currVal)
  
  return res

'''
2nd approach:
Only third fibo number are even, so we only add those.
Space complexity: 0(1)
'''
def sumFiboEven(limit):
  a, b, c  = 1, 1, 2
  res = 0
  while c < limit:
    res += c
    a = b + c
    b = c + a
    c = a + b
  return res

'''
3r approach:
Use the math relationship between even Fibonaci number
E(n) = 4*E(n-1) + E(n-2)
Space complexity: 0(1)
'''
def sumFiboMathEven(limit):
  prevVal, currVal = 2, 8  
  res = 10
  while currVal < limit:
    #print(currVal)
    currVal = prevVal + 4 * currVal
    prevVal = (currVal - prevVal)/4
    res += currVal
  res -= currVal
  return res

def averageTimeTaken(method, target):
  sumTimeTaken = 0
  for _ in range(TEST_CYCLES):
    start = time.process_time()
    method(target)
    sumTimeTaken += time.process_time() - start
  return sumTimeTaken / float(TEST_CYCLES)

def overalTest(target):

  print("Testing with target = ", target)
  print("First approach")
  print("Value: ", sumFibo(target))
  print("Average time Taken: ", averageTimeTaken(sumFibo,target))

  print("Second approach")
  print("Value: ", sumFiboEven(target))
  print("Average time Taken: ", averageTimeTaken(sumFiboEven,target))

  print("Third approach")
  print("Value: ", sumFiboEven(target))
  print("Average time Taken: ", averageTimeTaken(sumFiboEven,target))
  print("\n")


overalTest(4000000)
overalTest(400000000)
overalTest(400000000000)

# Testing with target =  4000000
# First approach
# Value:  4613732
# Average time Taken:  0.0
# Second approach
# Value:  4613732
# Average time Taken:  0.0
# Third approach
# Value:  4613732
# Average time Taken:  0.0


# Testing with target =  400000000   
# First approach
# Value:  350704366
# Average time Taken:  0.0
# Second approach
# Value:  350704366
# Average time Taken:  0.0
# Third approach
# Value:  350704366
# Average time Taken:  0.0


# Testing with target =  400000000000
# First approach
# Value:  478361013020
# Average time Taken:  0.0
# Second approach
# Value:  478361013020
# Average time Taken:  0.0
# Third approach
# Value:  478361013020
# Average time Taken:  0.0